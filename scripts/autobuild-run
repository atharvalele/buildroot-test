#!/usr/bin/env python

# Copyright (C) 2014 by Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# This script runs the autobuilder logic: it runs Buildroot builds for
# random configuration and submits the result to
# http://autobuild.buildroot.org.
#
# Configuration parameters are:
#
# - ninstances: the number of parallel, independent, build instances
#   that are executed. Due to the non-parallel nature of configure
#   scripts, it is recommended to have several parallel instances and
#   to lower the number of parallel jobs per instances. Can be defined
#   either through the command line, or through the configuration
#   file.
#
# - njobs: the number of parallel jobs inside a given instance (i.e
#   BR2_JLEVEL). Can be defined either through the command line, or
#   through the configuration file.
#
# - http-login, http-password: the HTTP login and password to submit
#   build results to http://autobuild.buildroot.org. Request those
#   credentials from Thomas Petazzoni
#   <thomas.petazzoni@free-electrons.com>. These configuration
#   parameters can only be defined through the configuration file.
#
# - submitter: a human-readable string identifying the
#   submitter/machine. Example: "Peter Korsgaard (gcc110)".
#
# TODO:
#
# - Instead of excluding all configurations that have
#   BR2_PACKAGE_CLASSPATH=y, improve the script to detect whether the
#   necessary host machine requirements are there to build classpath.
# - Extend required dependencies to subversion, mercurial, cpio, wget, python,
#   etc.
# - Detect selection of multiple virtual package providers and don't consider it
#   a failure
# - Fix problem in removal of output directory: sometimes this fails with
#   message 'directory not empty' which suggests that someone is writing to the
#   directory at the time of removal.

from __future__ import print_function

# Don't tell docopt about the defaults, as it would not allow the following
# priority hierarchy for arguments: command-line > config file > defaults
defaults = {
    '--ninstances': '1',
    '--njobs': '1',
    '--submitter': 'N/A',
    '--make-opts': '',
    '--nice': 0,
    '--pid-file': '/tmp/buildroot-autobuild.pid',
    '--http-url': 'http://autobuild.buildroot.org/submit/',
    '--toolchains-csv': 'support/config-fragments/autobuild/toolchain-configs.csv',
    '--repo': 'https://github.com/buildroot/buildroot.git',
}

doc = """autobuild-run - run Buildroot autobuilder

Usage: autobuild-run [options]

Options:
  -h, --help                     show this help message and exit
  -V, --version                  show version
  -n, --ninstances NINSTANCES    number of parallel instances
                                 Defaults to %(--ninstances)s.
  -j, --njobs NJOBS              number of parallel jobs
                                 Defaults to %(--njobs)s.
  --nice N                       Niceness, positive number
                                 Defaults to %(--nice)s.
  -s, --submitter SUBMITTER      name/machine of submitter
                                 Defaults to %(--submitter)s.
  --http-url URL                 URL of resource to submit your results.
                                 Defaults to %(--http-url)s.
  --http-login LOGIN             username to send results with
                                 Not set by default.
  --http-password PASSWORD       password to send results with (for security
                                 reasons it is recommended to define this in the
                                 config file instead, with user-read permissions
                                 only)
                                 Not set by default.
  --make-opts OPTSTRING          string of extra options to pass to Buildroot
                                 make, such as specific command wrappers
                                 Empty by default.
  --pid-file PATH                path to a file where to store the PID
                                 Defaults to %(--pid-file)s.
  -c, --config CONFIG            path to configuration file
                                 Not set by default.
  -d, --debug                    Send log output to stdout instead of log file
  --toolchains-csv CSVFILE       Toolchain configuration file
  -r, --repo URL                 URL of Buildroot repository to clone
                                 Defaults to %(--repo)s

Format of the configuration file:

  All arguments can also be specified in the configuration file specified with
  --config, using 'key = value' format (not including the leading --
  characters). For example:

   [main]
   ninstances = <value>
   njobs = <value>
   nice = <value>
   http-login = <value>
   http-password = <value>
   submitter = <value>


""" % defaults

__doc__ = doc

import contextlib
import csv
import docopt
import errno
import hashlib
import mmap
import multiprocessing
import os
from random import randint
import re
import shutil
import signal
import subprocess
import sys
from time import localtime, strftime
from distutils.version import StrictVersion
import platform
from threading import Thread, Event
import datetime

if sys.hexversion >= 0x3000000:
    import configparser
    import urllib.request as _urllib
else:
    import ConfigParser as configparser
    import urllib2 as _urllib

urlopen = _urllib.urlopen
urlopen_closing = lambda uri: contextlib.closing(urlopen(uri))

if sys.hexversion >= 0x3000000:
    def decode_bytes(b):
        return b.decode()

    def encode_str(s):
        return s.encode()
else:
    def _identity(e):
        return e

    decode_bytes = _identity
    encode_str = _identity

# A number of packages can take > 60mins of build time (e.g
# gst-ffmpeg, qt5webkit, mimic)
HUNG_BUILD_TIMEOUT = 120 # mins
VERSION = 1

def log_write(logf, msg):
    logf.write("[%s] %s\n" % (strftime("%a, %d %b %Y %H:%M:%S", localtime()), msg))
    logf.flush()

def check_version():
    with urlopen_closing('http://autobuild.buildroot.org/version') as r:
        version = int(decode_bytes(r.readline()).strip())
    if version > VERSION:
        print("ERROR: script version too old, please upgrade.")
        sys.exit(1)

def get_branch():
    """Returns the branch that should be built. It fetches a CSV file from
    autobuild.buildroot.org that provides the list of branches to test
    (first field) and their weight (second field). We build a list of
    branches, where the branch name is repeated N times, with N being
    the weight of the branch. We then pick a random branch in this
    list. This way, branches with a higher weight are more likely to
    be selected.
    """
    with urlopen_closing('http://autobuild.buildroot.org/branches') as r:
        csv_branches = r.readlines()
    branches = []
    for branch in csv.reader(csv_branches):
        branches += [branch[0]] * int(branch[1])

    return branches[randint(0, len(branches) - 1)]

class SystemInfo:
    DEFAULT_NEEDED_PROGS = ["make", "git", "gcc"]
    DEFAULT_OPTIONAL_PROGS = ["bzr", "java", "javac", "jar"]

    def __init__(self):
        self.needed_progs = list(self.__class__.DEFAULT_NEEDED_PROGS)
        self.optional_progs = list(self.__class__.DEFAULT_OPTIONAL_PROGS)
        self.progs = {}

    def find_prog(self, name, flags=os.X_OK, env=os.environ):
        if not name or name[0] == os.sep: raise ValueError(name)

        prog_path = env.get("PATH", None)
        # for windows compatibility, we'd need to take PATHEXT into account

        if prog_path:
            for prog_dir in filter(None, prog_path.split(os.pathsep)):
                # os.join() not necessary: non-empty prog_dir
                # and name[0] != os.sep
                prog = prog_dir + os.sep + name
                if os.access(prog, flags):
                    return prog
        # --
        return None

    def has(self, prog):

        """Checks whether a program is available.
        Lazily evaluates missing entries.

        Returns: None if prog not found, else path to the program [evaluates to True]
        """
        try:
            return self.progs[prog]
        except KeyError:
            pass

        have_it = self.find_prog(prog)
        # java[c] needs special care
        if have_it and prog in ('java', 'javac'):
            with open(os.devnull, "w") as devnull:
                if subprocess.call("%s -version | grep gcj" % prog, shell=True,
                                   stdout=devnull, stderr=devnull) != 1:
                    have_it = False
        # --
        self.progs[prog] = have_it
        return have_it

    def check_requirements(self):
        """Checks program dependencies.

        Returns: True if all mandatory programs are present, else False.
        """
        do_check_has_prog = self.has

        missing_requirements = False
        for prog in self.needed_progs:
            if not do_check_has_prog(prog):
                print("ERROR: your system lacks the '%s' program" % prog)
                missing_requirements = True

        # check optional programs here,
        # else they'd get checked by each worker instance
        for prog in self.optional_progs:
            do_check_has_prog(prog)

        return not missing_requirements

def prepare_build(**kwargs):
    """Prepare for the next build of the specified instance

    This function prepares the build by making sure all the needed
    directories are created, cloning or updating the Buildroot source
    code, and cleaning up remaining stuff from previous builds.
    """

    idir = "instance-%d" % kwargs['instance']
    log = kwargs['log']

    log_write(log, "INFO: preparing a new build")

    # Create the download directory if it doesn't exist
    dldir = os.path.join(idir, "dl")
    if not os.path.exists(dldir):
        os.mkdir(dldir)

    # recursively find files under root
    def find_files(root):
        for r, d, f in os.walk(root):
            # do not remove individual files from git caches. 'git' can
            # be either dl/<package>/git or dl/git and we want to
            # eventually remove tarballs for the git package, so check
            # for '.git' instead to match only dl/<package>/git/.git .
            if '.git' in d:
                del d[:]
                continue
            for i in f:
                yield os.path.join(r, i)

    # Remove 5 random files from the download directory. Removing
    # random files from the download directory allows to ensure we
    # regularly re-download files to check that their upstream
    # location is still correct.
    for i in range(0, 5):
        flist = list(find_files(dldir))
        if not flist:
            break
        f = flist[randint(0, len(flist) - 1)]
        log_write(log, "INFO: removing %s from downloads" %
                  os.path.relpath(f, dldir))
        os.remove(f)

    branch = get_branch()
    log_write(log, "INFO: testing branch '%s'" % branch)

    # Clone Buildroot. This only happens if the source directory
    # didn't exist already.
    srcdir = os.path.join(idir, "buildroot")
    if not os.path.exists(srcdir):
        ret = subprocess.call(["git", "clone", kwargs['repo'], srcdir],
                              stdout=log, stderr=log)
        if ret != 0:
            log_write(log, "ERROR: could not clone Buildroot sources")
            return -1

    # Update the Buildroot sources.
    abssrcdir = os.path.abspath(srcdir)
    ret = subprocess.call(["git", "fetch", "origin"], cwd=abssrcdir, stdout=log, stderr=log)
    if ret != 0:
        log_write(log, "ERROR: could not fetch Buildroot sources")
        return -1

    ret = subprocess.call(["git", "checkout", "--detach", "origin/%s" % branch], cwd=abssrcdir, stdout=log, stderr=log)
    if ret != 0:
        log_write(log, "ERROR: could not check out Buildroot sources")
        return -1

    # Create an empty output directory. We remove it first, in case a previous build was aborted.
    outputdir = os.path.join(idir, "output")
    if os.path.exists(outputdir):
        # shutil.rmtree doesn't remove write-protected files
        subprocess.call(["rm", "-rf", outputdir])
    os.mkdir(outputdir)
    with open(os.path.join(outputdir, "branch"), "w") as branchf:
        branchf.write(branch)

    return 0

def gen_config(**kwargs):
    """Generate a new random configuration."""
    idir = "instance-%d" % kwargs['instance']
    log = kwargs['log']
    outputdir = os.path.abspath(os.path.join(idir, "output"))
    srcdir = os.path.join(idir, "buildroot")

    log_write(log, "INFO: generate the configuration")

    if kwargs['debug']:
        devnull = log
    else:
        devnull = open(os.devnull, "w")

    args = [os.path.join(srcdir, "utils/genrandconfig"),
            "-o", outputdir, "-b", srcdir]

    toolchains_csv = kwargs['toolchains_csv']
    if toolchains_csv:
        if not os.path.isabs(toolchains_csv):
            toolchains_csv = os.path.join(srcdir, toolchains_csv)
        args.extend(["--toolchains-csv", toolchains_csv])

    ret = subprocess.call(args, stdout=devnull, stderr=log)
    return ret

def stop_on_build_hang(monitor_thread_hung_build_flag,
                       monitor_thread_stop_flag,
                       sub_proc, outputdir, log):
    build_time_logfile = os.path.join(outputdir, "build/build-time.log")
    while True:
        if monitor_thread_stop_flag.is_set():
            return
        if os.path.exists(build_time_logfile):
            mtime = datetime.datetime.fromtimestamp(os.stat(build_time_logfile).st_mtime)

            if mtime < datetime.datetime.now() - datetime.timedelta(minutes=HUNG_BUILD_TIMEOUT):
                if sub_proc.poll() is None:
                    monitor_thread_hung_build_flag.set() # Used by do_build() to determine build hang
                    log_write(log, "INFO: build hung")
                    sub_proc.kill()
                break
        monitor_thread_stop_flag.wait(30)

def check_reproducibility(**kwargs):
    """Check reproducibility of builds

    Use cmp on the built images, if difference is detected we run
    diffoscope to see where the differences lie
    """

    log = kwargs['log']
    idir = "instance-%d" % kwargs['instance']
    outputdir = os.path.join(idir, "output")
    diffoscope_output = os.path.join(outputdir, "diffoscope-results.txt")
    # Using only tar images for now
    build_1_image = os.path.join(outputdir, "images-1", "rootfs.tar")
    build_2_image = os.path.join(outputdir, "images", "rootfs.tar")

    ret = subprocess.call(["cmp", "build_1_image", "build_2_image"])
    if ret == 0:
        # rootfs images match byte-for-byte -> reproducible image
        log_write(log, "INFO: Build is reproducible!")
        return 0
    else:
        log_write(log, "INFO: Build is non-reproducible, running diffoscope")
        subprocess.call(["diffoscope", build_1_image, build_2_image,
                        "--text", diffoscope_output,])
        return -1

def do_build(**kwargs):
    """Run the build itself"""

    idir = "instance-%d" % kwargs['instance']
    log = kwargs['log']
    nice = kwargs['nice']

    # We need the absolute path to use with O=, because the relative
    # path to the output directory here is not relative to the
    # Buildroot sources, but to the location of the autobuilder
    # script.
    dldir = os.path.abspath(os.path.join(idir, "dl"))
    outputdir = os.path.abspath(os.path.join(idir, "output"))
    srcdir = os.path.join(idir, "buildroot")
    f = open(os.path.join(outputdir, "logfile"), "w+")
    log_write(log, "INFO: build started")

    cmd = ["nice", "-n", str(nice),
            "make", "O=%s" % outputdir,
            "-C", srcdir, "BR2_DL_DIR=%s" % dldir,
            "BR2_JLEVEL=%s" % kwargs['njobs']] \
          + kwargs['make_opts'].split()
    sub = subprocess.Popen(cmd, stdout=f, stderr=f)

    # Setup hung build monitoring thread
    monitor_thread_hung_build_flag = Event()
    monitor_thread_stop_flag = Event()
    build_monitor = Thread(target=stop_on_build_hang,
                           args=(monitor_thread_hung_build_flag,
                                 monitor_thread_stop_flag,
                                 sub, outputdir, log))
    build_monitor.daemon = True
    build_monitor.start()

    kwargs['buildpid'][kwargs['instance']] = sub.pid
    ret = sub.wait()
    kwargs['buildpid'][kwargs['instance']] = 0

    # If build failed, monitor thread would have exited at this point
    if monitor_thread_hung_build_flag.is_set():
        log_write(log, "INFO: build timed out [%d]" % ret)
        return -2
    else:
        # Stop monitor thread as this build didn't timeout
        monitor_thread_stop_flag.set()
    # Monitor thread should be exiting around this point

    if ret != 0:
        log_write(log, "INFO: build failed [%d]" % ret)
        return -1

    cmd = ["make", "O=%s" % outputdir, "-C", srcdir,
            "BR2_DL_DIR=%s" % dldir, "legal-info"] \
          + kwargs['make_opts'].split()
    ret = subprocess.call(cmd, stdout=f, stderr=f)
    if ret != 0:
        log_write(log, "INFO: build failed during legal-info")
        return -1
    log_write(log, "INFO: build successful")
    return 0

def do_reproducible_build(**kwargs):
    """Run the builds for reproducibility testing

    Build twice with the same configuration. Calls do_build() to
    perform the actual build.
    """

    idir = "instance-%d" % kwargs['instance']
    outputdir = os.path.join(idir, "output")
    log = kwargs['log']
    
    # Start the first build
    log_write(log, "INFO: Reproducible Build Test, starting build 1")
    ret = do_build(**kwargs)
    if ret != 0:
        log_write(log, "INFO: build 1 failed, skipping build 2")
        return ret
    
    # First build has been built, move files and start build 2
    images = os.path.join(outputdir, "images")
    target = os.path.join(outputdir, "target")
    build_1_images = os.path.join(outputdir, "images-1")
    build_1_target = os.path.join(outputdir, "target-1")
    os.mkdir(build_1_images)
    os.mkdir(build_1_target)
    subprocess.call(["mv", images, build_1_images])
    subprocess.call(["mv", target, build_1_target])

    # Clean up build 1
    cmd = ["make", "O=%s" % outputdir, "-C", srcdir, "clean"] \
          + kwargs['make_opts'].split()

    # Start the second build
    log_write(log, "INFO: Reproducible Build Test, starting build 2")
    ret = do_build(**kwargs)
    if ret != 0:
        log_write(log, "INFO: build 2 failed")
        return ret

    # Assuming both have built successfully
    ret = check_reproducibility()
    return ret

def send_results(result, **kwargs):
    """Prepare and store/send tarball with results

    This function prepares the tarball with the results, and either
    submits them to the official server (if the appropriate credentials
    are available) or stores them locally as tarballs.
    """

    idir = "instance-%d" % kwargs['instance']
    log = kwargs['log']

    outputdir = os.path.abspath(os.path.join(idir, "output"))
    srcdir = os.path.join(idir, "buildroot")
    resultdir = os.path.join(outputdir, "results")

    os.mkdir(resultdir)

    shutil.copyfile(os.path.join(outputdir, ".config"),
                    os.path.join(resultdir, "config"))
    shutil.copyfile(os.path.join(outputdir, "defconfig"),
                    os.path.join(resultdir, "defconfig"))
    shutil.copyfile(os.path.join(outputdir, "branch"),
                    os.path.join(resultdir, "branch"))

    def copy_if_exists(directory, src, dst=None):
        if os.path.exists(os.path.join(outputdir, directory, src)):
            shutil.copyfile(os.path.join(outputdir, directory, src),
                            os.path.join(resultdir, src if dst is None else dst))

    copy_if_exists("build", "build-time.log")
    copy_if_exists("build", "packages-file-list.txt")
    copy_if_exists("build", "packages-file-list-host.txt")
    copy_if_exists("build", "packages-file-list-staging.txt")
    copy_if_exists("legal-info", "manifest.csv", "licenses-manifest.csv")

    subprocess.call(["git log -n 1 --pretty=format:%%H > %s" % \
                     os.path.join(resultdir, "gitid")],
                    shell=True, cwd=srcdir)

    # Return True if the result should be rejected, False otherwise
    def reject_results():
        lastlines = decode_bytes(subprocess.Popen(
            ["tail", "-n", "3", os.path.join(outputdir, "logfile")],
            stdout=subprocess.PIPE).communicate()[0]).splitlines()

	# Reject results where qemu-user refused to build
	regexp = re.compile(r'^package/qemu/qemu.mk:.*Refusing to build qemu-user')
	for line in lastlines:
	    if regexp.match(line):
		return True

	return False

    if reject_results():
        return

    def get_failure_reason():
        # Output is a tuple (package, version), or None.
        lastlines = decode_bytes(subprocess.Popen(
            ["tail", "-n", "3", os.path.join(outputdir, "logfile")],
            stdout=subprocess.PIPE).communicate()[0]).splitlines()

        regexp = re.compile(r'make: \*\*\* .*/(?:build|toolchain)/([^/]*)/')
        for line in lastlines:
            m = regexp.search(line)
            if m:
                return m.group(1).rsplit('-', 1)

        # not found
        return None

    def extract_end_log(resultfile):
        """Save the last part of the build log, starting from the failed package"""

        def extract_last_500_lines():
            subprocess.call(["tail -500 %s > %s" % \
                             (os.path.join(outputdir, "logfile"), resultfile)],
                            shell=True)

        reason = get_failure_reason()
        if not reason:
            extract_last_500_lines()
        else:
            f = open(os.path.join(outputdir, "logfile"), 'r')
            mf = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
            mf.seek(0)
            # Search for first action on the failed package
            offset = mf.find(encode_str('>>> %s' % ' '.join(reason)))
            if offset != -1:
                with open(resultfile, "w") as endlog:
                    endlog.write(decode_bytes(mf[offset:]))
            else:
                # not found, use last 500 lines as fallback
                extract_last_500_lines()

            mf.close()
            f.close()

    extract_end_log(os.path.join(resultdir, "build-end.log"))

    def copy_config_log_files():
        """Recursively copy any config.log files from the failing package"""

        reason = get_failure_reason()
        if not reason:
            return

        srcroot = os.path.join(outputdir, "build", '-'.join(reason))
        destroot = os.path.join(resultdir, '-'.join(reason))
        config_files = ('config.log', 'CMakeCache.txt', 'CMakeError.log',
            'CMakeOutput.log')

        for root, dirs, files in os.walk(srcroot):
            dest = os.path.join(destroot, os.path.relpath(root, srcroot))

            for fname in files:
                if fname in config_files:
                    if not os.path.exists(dest):
                        os.makedirs(dest)
                    shutil.copy(os.path.join(root, fname), os.path.join(dest, fname))

    copy_config_log_files()

    resultf = open(os.path.join(resultdir, "status"), "w+")
    if result == 0:
        resultf.write("OK")
    elif result == -1:
        resultf.write("NOK")
    elif result == -2:
        resultf.write("TIMEOUT")
    resultf.close()

    with open(os.path.join(resultdir, "submitter"), "w+") as submitterf:
        submitterf.write(kwargs['submitter'])

    # Yes, shutil.make_archive() would be nice, but it doesn't exist
    # in Python 2.6.
    ret = subprocess.call(["tar", "cjf", "results.tar.bz2", "results"],
                          cwd=outputdir, stdout=log, stderr=log)
    if ret != 0:
        log_write(log, "ERROR: could not make results tarball")
        sys.exit(1)

    if kwargs['upload']:
        # Submit results. Yes, Python has some HTTP libraries, but
        # none of the ones that are part of the standard library can
        # upload a file without writing dozens of lines of code.
        ret = subprocess.call(["curl", "-u",
                               "%s:%s" % (kwargs['http_login'], kwargs['http_password']),
                               "-H", "Expect:",
                               "-F", "uploadedfile=@%s" % os.path.join(outputdir, "results.tar.bz2"),
                               "-F", "uploadsubmit=1",
                               kwargs['http_url']],
                              stdout=log, stderr=log)
        if ret != 0:
            log_write(log, "INFO: results could not be submitted, %d" % ret)
        else:
            log_write(log, "INFO: results were submitted successfully")
    else:
        # No http login/password, keep tarballs locally
        with open(os.path.join(outputdir, "results.tar.bz2"), 'rb') as f:
            sha1 = hashlib.sha1(f.read()).hexdigest()
        resultfilename = "instance-%d-%s.tar.bz2" % (kwargs['instance'], sha1)
        os.rename(os.path.join(outputdir, "results.tar.bz2"), resultfilename)
        log_write(log, "INFO: results saved as %s" % resultfilename)

def run_instance(**kwargs):
    """Main per-instance loop

    Prepare the build, generate a configuration, run the build, and submit the
    results.
    """

    idir = "instance-%d" % kwargs['instance']

    # If it doesn't exist, create the instance directory
    if not os.path.exists(idir):
        os.mkdir(idir)

    if kwargs['debug']:
        kwargs['log'] = sys.stdout
    else:
        kwargs['log'] = open(os.path.join(idir, "instance.log"), "a+")
    log_write(kwargs['log'], "INFO: instance started")

    while True:
        check_version()

        ret = prepare_build(**kwargs)
        if ret != 0:
            continue

        ret = gen_config(**kwargs)
        if ret != 0:
            log_write(kwargs['log'], "WARN: failed to generate configuration")
            continue

        # Check if the build test is supposed to be a reproducible test
        outputdir = os.path.abspath(os.path.join(idir, "output"))
        with open(os.path.join(outputdir, ".config"), "r") as fconf:
            if "BR2_REPRODUCIBLE=y" in fconf.read():
                log_write(kwargs['log'], "INFO: Reproducible Build Test")
                ret = do_reproducible_build(**kwargs)
            else:
                log_write(kwargs['log'], "INFO: Non Reproducible Build Test")
                ret = do_build(**kwargs)

        send_results(ret, **kwargs)

# args / config file merging inspired by:
# https://github.com/docopt/docopt/blob/master/examples/config_file_example.py

def load_ini_config(configfile):
    """Load configuration from file, returning a docopt-like dictionary"""

    if not os.path.exists(configfile):
        print("ERROR: configuration file %s does not exist" % configfile)
        sys.exit(1)

    config = configparser.RawConfigParser()
    if not config.read(configfile):
        print("ERROR: cannot parse configuration file %s" % configfile)
        sys.exit(1)

    # Prepend '--' to options specified in the config file, so they can be
    # merged with those given on the command-line
    return dict(('--%s' % key, value) for key, value in config.items('main'))


def merge(dict_1, dict_2):
    """Merge two dictionaries.

    Values that evaluate to true take priority over falsy values.
    `dict_1` takes priority over `dict_2`.

    """
    return dict((str(key), dict_1.get(key) or dict_2.get(key))
                for key in set(dict_2) | set(dict_1))

def main():

    # Avoid locale settings of autobuilder machine leaking in, for example
    # showing error messages in another language.
    os.environ['LC_ALL'] = 'C'

    check_version()
    sysinfo = SystemInfo()

    args = docopt.docopt(doc, version=VERSION)

    if args['--config']:
        ini_config = load_ini_config(args['--config'])
        # merge config/args, priority given to args
        args = merge(args, ini_config)

    # load in defaults at lowest priority
    args = merge(args, defaults)

    # Save our PID very early, so we can be stopped
    with open(args['--pid-file'], "w+") as pidf:
        pidf.write("%d" % os.getpid())

    # http_login/password could theoretically be allowed as empty, so check
    # explicitly on None.
    upload = (args['--http-login'] is not None) \
             and (args['--http-password'] is not None)
    if upload:
        sysinfo.needed_progs.append("curl")
    else:
        print("WARN: due to the lack of http login/password details, results will not be submitted")
        print("WARN: tarballs of results will be kept locally only")

    if not sysinfo.check_requirements():
        sys.exit(1)

    # Enforce the sanest umask here, to avoid buildroot doing it on its
    # own and causing a double-make call, thus adding extraneous lines
    # in case of failures.
    os.umask(0022)

    def sigterm_handler(signum, frame):
        """Kill all children"""

        # uninstall signal handler to prevent being called for all subprocesses
        signal.signal(signal.SIGINT, signal.SIG_IGN)
        signal.signal(signal.SIGTERM, signal.SIG_DFL)

        # stop all instances to prevent new children to be spawned
        for p in processes:
            p.terminate()

        # kill build processes started with timeout (that puts its children
        # explicitly in a separate process group)
        for pid in buildpid:
            if pid == 0:
                continue
            try:
                os.kill(pid, signal.SIGTERM)
            except OSError as e:
                if e.errno != errno.ESRCH: # No such process, ignore
                    raise

        # kill any remaining children in our process group
        os.killpg(os.getpgid(os.getpid()), signal.SIGTERM)

        sys.exit(1)

    buildpid = multiprocessing.Array('i', int(args['--ninstances']))
    processes = []
    for i in range(0, int(args['--ninstances'])):
        p = multiprocessing.Process(target=run_instance, kwargs=dict(
                instance = i,
                njobs = args['--njobs'],
                sysinfo = sysinfo,
                http_url = args['--http-url'],
                http_login = args['--http-login'],
                http_password = args['--http-password'],
                submitter = args['--submitter'],
                make_opts = (args['--make-opts'] or ''),
                nice = (args['--nice'] or 0),
                toolchains_csv = args['--toolchains-csv'],
                repo = args['--repo'],
                upload = upload,
                buildpid = buildpid,
                debug = args['--debug']
            ))
        p.start()
        processes.append(p)

    signal.signal(signal.SIGINT, sigterm_handler)
    signal.signal(signal.SIGTERM, sigterm_handler)

    for p in processes:
        p.join()

if __name__ == '__main__':
    main()
